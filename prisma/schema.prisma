// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

model Board {
  id                 Int                 @id @default(autoincrement())
  title              String
  color              BoardColor?
  image              String?
  userId             Int                 @map(name: "user_id")
  user               User                @relation(fields: [userId], references: [id])
  starUsers          User[]              @relation("_board_stars")
  boardStarRelations BoardStarRelation[]
  lists              List[]
  createdAt          DateTime            @default(now()) @map(name: "created_at")
  updatedAt          DateTime            @default(now()) @map(name: "updated_at")

  @@map(name: "boards")
}

enum BoardColor {
  red
  green
  blue
  tomato
  pink
  gray
  purple
}

model BoardStarRelation {
  boardId   Int      @map(name: "board_id")
  board     Board    @relation(fields: [boardId], references: [id])
  userId    Int      @map(name: "user_id")
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@id([boardId, userId])
  @@map(name: "_board_star_relations")
}

model List {
  id        Int      @id @default(autoincrement())
  name      String
  boardId   Int      @map("board_id")
  board     Board    @relation(fields: [boardId], references: [id])
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  closed    Boolean  @default(false)
  position  Float  @default(65536)

  @@map(name: "lists")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")


  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model User {
  id                 Int                 @id @default(autoincrement())
  name               String?
  email              String?             @unique
  emailVerified      DateTime?           @map(name: "email_verified")
  image              String?
  introduction       String?
  createdAt          DateTime            @default(now()) @map(name: "created_at")
  updatedAt          DateTime            @default(now()) @map(name: "updated_at")
  starBoards         Board[]             @relation("_board_stars")
  boards             Board[]
  boardStarRelations BoardStarRelation[]

  @@map(name: "users")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}
